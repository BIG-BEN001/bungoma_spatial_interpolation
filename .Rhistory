library(shiny)
install.packages("raster")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(shiny)
library(geojsonsf)
install.packages("geojsonsf")
install.packages("geojsonsf")
detach("package:geojsonsf", unload = TRUE)
install.packages("geojsonsf")
install.packages("geojsonsf")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("geojsonsf")
install.packages("geojsonsf")
library(ggthemes)
detach("package:ggthemes", unload = TRUE)
install.packages("devtools")
install.packages("devtools")
install.packages("gstat")
install.packages("ggvis")
install.packages("jsonify")
install.packages("jsonlite")
install.packages("leaflet")
install.packages("leafem")
install.packages("leafsync")
install.packages("leaflet")
install.packages("leaflet")
install.packages("stringi")
install.packages("mapdeck")
install.packages("maptools")
install.packages("pkgbiuld")
install.packages("pkgconfig")
install.packages("pkgload")
install.packages("plotly")
install.packages("plyr")
install.packages("png")
install.packages("polyclip")
install.packages("purr")
install.packages("pkgconfig")
install.packages("pkgconfig")
install.packages("rcmdcheck")
install.packages("remotes")
install.packages("reshape2")
install.packages("rgl")
install.packages("rjson")
install.packages("rmarkdown")
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages("sf")
install.packages("sm")
install.packages("sp")
install.packages("spatstat")
install.packages("spacetime")
install.packages("spatialwidget")
install.packages("spatstat.utils")
install.packages("spatstat.data")
install.packages("spData")
install.packages("spgwr")
install.packages("stars")
install.packages("stringi")
install.packages("stringr")
install.packages("stringi")
install.packages("stringr")
install.packages("sys")
install.packages("tensor")
install.packages("testthat")
install.packages("tidyselect")
install.packages("tmaptools")
install.packages("testthat")
install.packages("tidyselect")
install.packages("units")
install.packages("viridisLite")
install.packages("webshot")
install.packages("xopen")
install.packages("xtable")
install.packages("xts")
install.packages("zip")
install.packages("zoo")
install.packages("spatial")
install.packages("splines")
install.packages("tools")
install.packages("translations")
install.packages("survival")
install.packages("stats4")
install.packages("rpart")
install.packages("nnet")
install.packages("tools")
install.packages("nnet")
install.packages("automap")
install.packages("brew")
install.packages("cli")
install.packages("shiny")
install.packages("shiny")
install.packages("RCurl")
install.packages("xlsx")
install.packages("ggmap")
install.packages("rworldmap")
install.packages("data.table")
install.packages("mapview")
library(shiny)
shiny::runApp('shiny/app')
shiny::runApp('shiny/app')
library(htmltools)
shiny::runApp('shiny/app')
library(rmarkdown)
shiny::runApp('shiny/app')
load("C:/Users/LYN/Desktop/BIG_BEN/Tests-for-GeoSpatial-Data-Scientist-master/Tests-for-GeoSpatial-Data-Scientist-master/inputData/2020-07-21 - input data for test GeoSpatial Data Scientist.RData")
po
gadm
library("sp")
library("rgdal")
library("rgeos")
library("tmap")
library("spatstat")
library("maptools")
po
load("C:/Users/LYN/Desktop/BIG_BEN/Tests-for-GeoSpatial-Data-Scientist-master/Tests-for-GeoSpatial-Data-Scientist-master/inputData/2020-07-21 - input data for test GeoSpatial Data Scientist.RData")
library("sp")
library("rgdal")
library("rgeos")
library("tmap")
library("spatstat")
library("maptools")
library("gstat")
library("raster")
proj4string(po) <- CRS('+proj=longlat +datum=WGS84 +no_defs')
proj4string(gadm) <- CRS('+proj=longlat +datum=WGS84 +no_defs')
shp <- readOGR(".", "point_shp")
shp2 <- readOGR(".", "gadm_Shapefile")
setwd("C:/Users/LYN/Desktop/BIG_BEN/Tests-for-GeoSpatial-Data-Scientist-master")
shp <- readOGR(".", "point_shp")
shp2 <- readOGR(".", "gadm_Shapefile")
grid <-spsample(po, type = 'regular', n = 1000)
idw <- idw(po$pH ~ 1, po, newdata= grid)
gridded(idw) <- TRUE
raster_idw <- raster(idw)
projection(raster_idw) <- CRS("+proj=longlat +datum=WGS84 +no_defs")
plot(raster_idw)
tm_shape(raster_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "Reds", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "Blues", style = "quantile",
legend.size.show = FALSE,
title.col = "pH") +
tm_layout(legend.position = c("left", "bottom"), legend.text.size = 1.1,
legend.title.size = 1.4, frame = FALSE, legend.bg.color = "white",
legend.bg.alpha = 0.5)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "Spectral", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "Spectral", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
masked_idw <- crop(raster_idw, shp2)
masked_idw <- mask(raster_idw, shp2)
plot(masked_idw)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "Spectral", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "Spectral", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =5 ,
palette = "Spectral", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "Spectral", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =4 ,
palette = "Spectral", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "Spectral", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =8 ,
palette = "Spectral", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "Spectral", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =50 ,
palette = "Spectral", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "Spectral", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "Spectral", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "Spectral", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "BrBG", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "BrBG", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "Accent", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "Accent", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "BuGn", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "BuGn", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "PuBuGn", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "PuBuGn", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "Spectral", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "Specral", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "Spectral", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "Spectral", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "equal", n =200 ,
palette = "Spectral", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "Spectral", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "pretty", n =200 ,
palette = "Spectral", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "Spectral", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "equal", n =200 ,
palette = "-Spectral", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "-Spectral", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE
# Plottting the cropped layer in interractive mode(Using the tmap_mode("view") function)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "equal", n =200 ,
palette = "-Spectral", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "-Spectral", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "equal", n =200 ,
palette = "-Spectral", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "-Spectral", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "equal", n =200 ,
palette = "Spectral", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "Spectral", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "Spectral", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "Spectral", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =5 ,
palette = "Spectral", legend.show = T)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "Spectral", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "Spectral", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "Spectral", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "Greens", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "Greens", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "YlOrRd", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "YlOrRd", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "-YlOrRd", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "-YlOrRd", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "RdYlGn", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "RdYlGn", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =2000 ,
palette = "RdYlGn", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "RdYlGn", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "RdYlGn", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "RdYlGn", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tmap_mode("view")  #<- Use this to change the layer to interractive mode if necessary
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "RdYlGn", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "RdYlGn", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "RdYlGn", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "RdYlGn", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)+
tmap_mode("view")
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "RdYlGn", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "RdYlGn", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
+tmap_mode("view")
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "RdYlGn", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "RdYlGn", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
+ tmap_mode("view")
# Plottting the cropped layer in interractive mode(Using the tmap_mode("view") function)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "RdYlGn", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "RdYlGn", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE) +
tmap_mode("view")
library("sp")
library("rgdal")
library("rgeos")
library("tmap")
library("spatstat")
library("maptools")
library("gstat")
library("raster")
shp <- readOGR(".", "point_shp")
shp2 <- readOGR(".", "gadm_Shapefile")
writeOGR(po, dsn = "C:/Users/LYN/Desktop/BIG_BEN/Tests-for-GeoSpatial-Data-Scientist-master", layer = "po_Shapefile", driver = "ESRI Shapefile")
writeOGR(gadm, dsn = "C:/Users/LYN/Desktop/BIG_BEN/Tests-for-GeoSpatial-Data-Scientist-master", layer = "gadm_Shapefile", driver = "ESRI Shapefile")
shp <- readOGR(".", "point_shp")
shp2 <- readOGR(".", "gadm_Shapefile")
grid <-spsample(po, type = 'regular', n = 1000)
idw <- idw(po$pH ~ 1, po, newdata= grid)
gridded(idw) <- TRUE
raster_idw <- raster(idw)
projection(raster_idw) <- CRS("+proj=longlat +datum=WGS84 +no_defs")
plot(raster_idw)
idwdf = as.data.frame(idw)
ptsdf = as.data.frame(po)
ggplot()+
geom_tile(data=idwdf, aes(x=x1, y = x2, fill = var1.pred))+
geom_point(data = ptsdf, aes(x=coords.x1, y=coords.x2),shape=4)+
scale_fill_gradientn(colours = terrain.colors(10))+
theme_bw()
library("ggplot2")
ggplot()+
geom_tile(data=idwdf, aes(x=x1, y = x2, fill = var1.pred))+
geom_point(data = ptsdf, aes(x=coords.x1, y=coords.x2),shape=4)+
scale_fill_gradientn(colours = terrain.colors(10))+
theme_bw()
shp2 <- readOGR(".", "bungoma")
tm_shape(raster_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "Reds", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "Blues", style = "quantile",
legend.size.show = FALSE,
title.col = "pH") +
tm_layout(legend.position = c("left", "bottom"), legend.text.size = 1.1,
legend.title.size = 1.4, frame = FALSE, legend.bg.color = "white",
legend.bg.alpha = 0.5)
tm_shape(masked_idw) + tm_raster("var1.pred", style = "quantile", n =200 ,
palette = "RdYlGn", legend.show = FALSE)+
tm_shape(shp2) + tm_borders(alpha=.5)+
tm_shape(shp) + tm_bubbles(size = "pH", col = "pH",
palette = "RdYlGn", style = "quantile",
legend.size.show = FALSE,
title.col = "pH Value") +
tm_layout(legend.position = c("right", "bottom"), legend.text.size = 0.8,
legend.title.size = 1.1, frame = TRUE)
